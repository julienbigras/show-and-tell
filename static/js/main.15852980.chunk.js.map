{"version":3,"sources":["Components/Header.js","Components/Buttons.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","class","Component","Buttons","className","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","_this2","Components_Header","Autocomplete_default","getItemValue","item","label","items","id","shouldItemRender","toLowerCase","indexOf","renderItem","highlighted","key","style","backgroundColor","onChange","e","setState","target","onSelect","Components_Buttons","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15852980.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>\r\n                    <span class=\"blueLetter\">G</span>\r\n                    <span class=\"greenLetter\">r</span>\r\n                    <span class=\"redLetter\">o</span>\r\n                    <span class=\"yellowLetter\">o</span>\r\n                    <span class=\"blueLetter\">g</span>\r\n                    <span class=\"greenLetter\">l</span>\r\n                    <span class=\"redLetter\">e</span>\r\n                </h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import React, {Component} from 'react';\r\n\r\nclass Buttons extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"buttonDiv\">\r\n                <button>Groogle Search</button>\r\n                <button>I'm Feeling Lucky</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Buttons","import React, {Component} from 'react';\nimport './App.css';\nimport Autocomplete from 'react-autocomplete';\nimport Header from './Components/Header.js';\nimport Buttons from './Components/Buttons.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: '',\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Autocomplete\n          // getItemValue prop contains a function that takes item as an argument, and returns the label of that item\n          getItemValue={item => item.label}\n          // items prop object contains an array of objects that will populate the dropdown menu of suggestions\n          items={[\n            { id: \"Alabama\", label: \"Alabama\"},\n            { id: \"Alaska\", label: \"Alaska\"},\n            { id: \"Arizona\", label: \"Arizona\"},\n            { id: \"Arkansas\", label: \"Arkansas\"},\n            { id: \"California\", label: \"California\"},\n            { id: \"Colorado\", label: \"Colorado\"},\n            { id: \"Connecticut\", label: \"Connecticut\"},\n            { id: \"Delaware\", label: \"Delaware\"},\n            { id: \"Florida\", label: \"Florida\"},\n            { id: \"Georgia\", label: \"Georgia\"},\n            { id: \"Hawaii\", label: \"Hawaii\"},\n            { id: \"Idaho\", label: \"Idaho\"},\n            { id: \"Illnois\", label: \"Illnois\"},\n            { id: \"Indiana\", label: \"Indiana\"},\n            { id: \"Iowa\", label: \"Iowa\"},\n            { id: \"Kansas\", label: \"Kansas\"},\n            { id: \"Kentucky\", label: \"Kentucky\"},\n            { id: \"Louisiana\", label: \"Louisiana\"},\n            { id: \"Maine\", label: \"Maine\"},\n            { id: \"Maryland\", label: \"Maryland\"},\n            { id: \"Massachusetts\", label: \"Massachusetts\"},\n            { id: \"Michigan\", label: \"Michigan\"},\n            { id: \"Minnesota\", label: \"Minnesota\"},\n            { id: \"Mississippi\", label: \"Mississippi\"},\n            { id: \"Missouri\", label: \"Missouri\"},\n            { id: \"Montana\", label: \"Montana\"},\n            { id: \"Nebraska\", label: \"Nebraska\"},\n            { id: \"Nevada\", label: \"Nevada\"},\n            { id: \"New Hampshire\", label: \"New Hampshire\"},\n            { id: \"New Jersey\", label: \"New Jersey\"},\n            { id: \"New Mexico\", label: \"New Mexico\"},\n            { id: \"New York\", label: \"New York\"},\n            { id: \"North Carolina\", label: \"North Carolina\"},\n            { id: \"North Dakota\", label: \"North Dakota\"},\n            { id: \"Ohio\", label: \"Ohio\"},\n            { id: \"Oklahoma\", label: \"Oklahoma\"},\n            { id: \"Oregon\", label: \"Oregon\"},\n            { id: \"Pennsylvania\", label: \"Pennsylvania\"},\n            { id: \"Rhode Island\", label: \"Rhode Island\"},\n            { id: \"South Carolina\", label: \"South Carolina\"},\n            { id: \"South Dakota\", label: \"South Dakota\"},\n            { id: \"Tennessee\", label: \"Tennessee\"},\n            { id: \"Texas\", label: \"Texas\"},\n            { id: \"Utah\", label: \"Utah\"},\n            { id: \"Vermont\", label: \"Vermont\"},\n            { id: \"Virginia\", label: \"Virginia\"},\n            { id: \"Washington\", label: \"Washington\"},\n            { id: \"West Virginia\", label: \"West Virginia\"},\n            { id: \"Wisconsin\", label: \"Wisconsin\"},\n            { id: \"Wyoming\", label: \"Wyoming\"},\n          ]}\n          // \n          shouldItemRender={(item, value) => item.label.toLowerCase().indexOf(value.toLowerCase()) > -1}\n          // renderItem prop contains a function that generates the render tree for each item in the dropdown menu\n          renderItem={(item, highlighted) =>\n            <div\n              key={item.id}\n              style={{ backgroundColor: highlighted ? '#eee' : 'transparent' }}\n            >\n              {item.label}\n            </div>\n          }\n          // stores this.state.value in a variable called value\n          value={this.state.value}\n          // onChange's value is a function that sets the state of value to be equal to the value of the target on which the event is happening\n          onChange={e => this.setState({ value: e.target.value })}\n          // onSelect's value is a function that takes value as an argument, and sets the state of value to be equal to the value variable\n          onSelect={value => this.setState({ value })}\n        />\n        <Buttons />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}